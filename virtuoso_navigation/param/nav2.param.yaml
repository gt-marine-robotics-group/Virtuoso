local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: map 
      robot_base_frame: wamv/base_link 
      use_sim_time: True
      rolling_window: true
      width: 50 
      height: 50
      resolution: 0.05
      robot_radius: 2.0
      plugins: ["stvl_layer"]
      stvl_layer:
        plugin: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"
        enabled: true 
        voxel_decay: 15.
        decay_model: 0
        voxel_size: 0.05
        track_unknown_space: true
        max_obstacle_height: 10.0
        unknown_threshold: 15
        mark_threshold: 0
        update_footprint_enabled: true
        combination_method: 1
        origin_z: 0
        publish_voxel_map: true
        transform_tolerance: 0.2
        mapping_mode: false
        map_save_duration: 60.0
        observation_sources: pointcloud
        pointcloud:
          data_type: PointCloud2
          topic: /processing/points_shore_filtered 
          marking: true
          clearing: true
          obstacle_range: 30.0
          min_obstacle_height: 0.0
          max_obstacle_height: 10.0
          expected_update_rate: 0.0
          observation_persistence: 0.0
          inf_is_valid: false
          voxel_filter: true
          clear_after_reading: false 
          max_z: 10.0
          min_z: 0.0
          vertical_fov_angle: 3.14
          horizontal_fov_angle: 3.14
          decay_acceleration: 15.0
          model_type: 1
      static_layer:
        enabled: true 
        map_subscribe_transient_local: False
        always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: True
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: True

bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map 
    robot_base_frame: wamv/base_link
    odom_topic: /localization/odometry
    default_bt_xml_filename: "navigate_w_r1eplanning_time.xml"
    default_nav_to_pose_bt_xml: "navigate_w_r1eplanning_time.xml"
    default_nav_through_poses_bt_xml: "navigate_w_r1eplanning_time.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    # - nav2_rotate_action_bt_node
    # - nav2_translate_action_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node

global_costmap:
  global_costmap:
    ros__parameters:
      always_send_full_costmap: False 
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: wamv/base_link 
      use_sim_time: True
      robot_radius: 2.0
      resolution: 1.0
      track_unknown_space: true
      rolling_window: true
      height: 1000
      width: 1000
      plugins: ["obstacle_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true 
        observation_sources: pointcloud 
        pointcloud:
          data_type: PointCloud2
          topic: /processing/points_shore_filtered
          obstacle_min_range: 5.0
          max_obstacle_height: 10.0
          marking: True
          clearing: True
      global_costmap_client:
        ros__parameters:
          use_sim_time: True
      global_costmap_rclcpp_node:
        ros__parameters:
          use_sim_time: True
          
planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: True

    GridBased:
      plugin: "smac_planner/SmacPlanner"
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: true                 # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_planning_time: 5.0              # max time in s for planner to plan, smooth
      motion_model_for_search: "DUBIN"    # Hybrid-A* Dubin, Redds-Shepp
      angle_quantization_bins: 72         # Number of angle bins for search
      analytic_expansion_ratio: 3.5       # The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0  # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting

      minimum_turning_radius: 10.0        # minimum turning radius in m of path / vehicle
      reverse_penalty: 10.0                # Penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.0                 # Penalty to apply if motion is changing directions (L to R), must be >= 0

      non_straight_penalty: 1.0           # Penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # Penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.015
      lookup_table_size: 20.0             # Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: false     # Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.
      smooth_path: True                   # If true, does a simple and quick smoothing post-processing to the path

      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1e-10
        do_refinement: true

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0

lifecycle_manager:
  ros__parameters:
    autostart: true
    node_names: ['controller_server', 'planner_server', 'recoveries_server', 'bt_navigator', 'waypoint_follower']
    bond_timeout: 4.0


controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.001
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugin: "goal_checker"
    controller_plugins: ["FollowPath"]
    odom_topic: /localization/odometry
    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"

      required_movement_radius: 0.0

      movement_time_allowance: 10.0
    # Goal checker parameters
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"

      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.15
      stateful: True
    # DWB parameters
    FollowPath:       
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True

      min_vel_x: -3.0
      min_vel_y: -3.0
      max_vel_x: 3.0
      max_vel_y: 3.0
      max_vel_theta: 0.4
      min_speed_xy: 0.0
      max_speed_xy: 2.0
      min_speed_theta: -0.4
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 1.3
      acc_lim_y: 1.3
      acc_lim_theta: 0.1
      decel_lim_x: -1.3
      decel_lim_y: -1.3

      vx_samples: 20
      vy_samples: 5
      vtheta_samples: 20
      sim_time: 1.7
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 0.2

      xy_goal_tolerance: 0.0 # If this is not 0 (or close) it won't go closer than about a meter for a while

      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle",
       "GoalAlign", "PathAlign", 
       "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 10.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 10.1
      PathDist.scale: 64.0
      GoalDist.scale: 24.0

      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 10.0
      prune_plan: false

      RotateToGoal.lookahead_time: -1.0
      shorten_transformed_plan: false

      

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True
    
recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
#    recovery_plugins: ["spin", "backup", "wait"]
#    spin:
#      plugin: "nav2_recoveries/Spin"
#    backup:
#      plugin: "nav2_recoveries/BackUp"
#    wait:
##      plugin: "nav2_recoveries/Wait"
#    global_frame: odom
#    robot_base_frame: wamv/base_link
#    transform_timeout: 0.1
#    simulate_ahead_time: 2.0
#    max_rotational_vel: 0.4
#    min_rotational_vel: 0.4
#    rotational_acc_lim: 3.2

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: True
